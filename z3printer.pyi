from .z3consts import *
from .z3core import *
from ctypes import *
from . import z3 as z3
from typing import Any

def u(x): ...

class FormatObject:
    def is_compose(self): ...
    def is_choice(self): ...
    def is_indent(self): ...
    def is_string(self): ...
    def is_linebreak(self): ...
    def is_nil(self): ...
    def children(self): ...
    def as_tuple(self) -> None: ...
    def space_upto_nl(self): ...
    def flat(self): ...

class NAryFormatObject(FormatObject):
    def __init__(self, fs) -> None: ...
    def children(self): ...

class ComposeFormatObject(NAryFormatObject):
    def is_compose(sef): ...
    def as_tuple(self): ...
    def space_upto_nl(self): ...
    def flat(self): ...

class ChoiceFormatObject(NAryFormatObject):
    def is_choice(sef): ...
    def as_tuple(self): ...
    def space_upto_nl(self): ...
    def flat(self): ...

class IndentFormatObject(FormatObject):
    indent: Any
    child: Any
    def __init__(self, indent, child) -> None: ...
    def children(self): ...
    def as_tuple(self): ...
    def space_upto_nl(self): ...
    def flat(self): ...
    def is_indent(self): ...

class LineBreakFormatObject(FormatObject):
    space: str
    def __init__(self) -> None: ...
    def is_linebreak(self): ...
    def as_tuple(self): ...
    def space_upto_nl(self): ...
    def flat(self): ...

class StringFormatObject(FormatObject):
    string: Any
    def __init__(self, string) -> None: ...
    def is_string(self): ...
    def as_tuple(self): ...
    def space_upto_nl(self): ...

def fits(f, space_left): ...
def to_format(arg, size: Any | None = ...): ...
def compose(*args): ...
def indent(i, arg): ...
def group(arg): ...
def line_break(): ...
def seq(args, sep: str = ..., space: bool = ...): ...
def seq1(header, args, lp: str = ..., rp: str = ...): ...
def seq2(header, args, i: int = ..., lp: str = ..., rp: str = ...): ...
def seq3(args, lp: str = ..., rp: str = ...): ...

class StopPPException(Exception): ...

class PP:
    max_lines: int
    max_width: int
    bounded: bool
    max_indent: int
    def __init__(self) -> None: ...
    pos: Any
    ribbon_pos: Any
    def pp_string(self, f, indent) -> None: ...
    def pp_compose(self, f, indent) -> None: ...
    def pp_choice(self, f, indent) -> None: ...
    line: Any
    def pp_line_break(self, f, indent) -> None: ...
    def pp(self, f, indent) -> None: ...
    out: Any
    def __call__(self, out, f) -> None: ...

class Formatter:
    max_depth: int
    max_args: int
    rational_to_decimal: bool
    precision: int
    ellipses: Any
    max_visited: int
    fpa_pretty: bool
    def __init__(self) -> None: ...
    def pp_ellipses(self): ...
    def pp_arrow(self): ...
    def pp_unknown(self): ...
    def pp_name(self, a): ...
    def is_infix(self, a): ...
    def is_unary(self, a): ...
    def get_precedence(self, a): ...
    def is_infix_compact(self, a): ...
    def is_infix_unary(self, a): ...
    def add_paren(self, a): ...
    def pp_sort(self, s): ...
    def pp_const(self, a): ...
    def pp_int(self, a): ...
    def pp_rational(self, a): ...
    def pp_algebraic(self, a): ...
    def pp_string(self, a): ...
    def pp_bv(self, a): ...
    def pp_fd(self, a): ...
    def pp_fprm_value(self, a): ...
    def pp_fp_value(self, a): ...
    def pp_fp(self, a, d, xs): ...
    def pp_prefix(self, a, d, xs): ...
    def is_assoc(self, k): ...
    def is_left_assoc(self, k): ...
    def infix_args_core(self, a, d, xs, r) -> None: ...
    def infix_args(self, a, d, xs): ...
    def pp_infix(self, a, d, xs): ...
    def pp_unary(self, a, d, xs): ...
    def pp_power_arg(self, arg, d, xs): ...
    def pp_power(self, a, d, xs): ...
    def pp_neq(self): ...
    def pp_distinct(self, a, d, xs): ...
    def pp_select(self, a, d, xs): ...
    def pp_unary_param(self, a, d, xs): ...
    def pp_extract(self, a, d, xs): ...
    def pp_loop(self, a, d, xs): ...
    def pp_set(self, id, a): ...
    def pp_pattern(self, a, d, xs): ...
    def pp_is(self, a, d, xs): ...
    def pp_map(self, a, d, xs): ...
    def pp_fdecl(self, f, a, d, xs): ...
    def pp_K(self, a, d, xs): ...
    def pp_atmost(self, a, d, f, xs): ...
    def pp_pbcmp(self, a, d, f, xs): ...
    def pp_app(self, a, d, xs): ...
    def pp_var(self, a, d, xs): ...
    def pp_quantifier(self, a, d, xs): ...
    visited: Any
    def pp_expr(self, a, d, xs): ...
    def pp_decl(self, f): ...
    def pp_seq_core(self, f, a, d, xs): ...
    def pp_seq(self, a, d, xs): ...
    def pp_seq_seq(self, a, d, xs): ...
    def pp_model(self, m): ...
    def pp_func_entry(self, e): ...
    def pp_func_interp(self, f): ...
    def pp_list(self, a): ...
    def main(self, a): ...
    def __call__(self, a): ...

class HTMLFormatter(Formatter):
    ellipses: Any
    def __init__(self) -> None: ...
    def pp_arrow(self): ...
    def pp_unknown(self): ...
    def pp_name(self, a): ...
    def is_assoc(self, k): ...
    def is_left_assoc(self, k): ...
    def is_infix(self, a): ...
    def is_unary(self, a): ...
    def get_precedence(self, a): ...
    def pp_neq(self): ...
    def pp_power(self, a, d, xs): ...
    def pp_var(self, a, d, xs): ...
    def pp_quantifier(self, a, d, xs): ...

def set_pp_option(k, v): ...
def obj_to_string(a): ...
def set_html_mode(flag: bool = ...) -> None: ...
def set_fpa_pretty(flag: bool = ...) -> None: ...
def get_fpa_pretty(): ...
def in_html_mode(): ...
def pp(a) -> None: ...
def print_matrix(m) -> None: ...
def insert_line_breaks(s, width): ...
