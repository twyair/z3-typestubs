from .z3types import *
from .z3consts import *
from typing import Any

lp: Any
lds: Any
d: Any
push_eh_type: Any
pop_eh_type: Any
fresh_eh_type: Any
fixed_eh_type: Any
final_eh_type: Any
eq_eh_type: Any
on_model_eh_type: Any

class Elementaries:
    f: Any
    get_error_code: Any
    get_error_message: Any
    OK: Any
    Exception: Any
    def __init__(self, f) -> None: ...
    def Check(self, ctx) -> None: ...

def Z3_set_error_handler(ctx, hndlr, _elems=...): ...
def Z3_solver_propagate_init(ctx, s, user_ctx, push_eh, pop_eh, fresh_eh, _elems=...) -> None: ...
def Z3_solver_propagate_final(ctx, s, final_eh, _elems=...) -> None: ...
def Z3_solver_propagate_fixed(ctx, s, fixed_eh, _elems=...) -> None: ...
def Z3_solver_propagate_eq(ctx, s, eq_eh, _elems=...) -> None: ...
def Z3_solver_propagate_diseq(ctx, s, diseq_eh, _elems=...) -> None: ...
def Z3_optimize_register_model_eh(ctx, o, m, user_ctx, on_model_eh, _elems=...) -> None: ...
def Z3_global_param_set(a0, a1, _elems=...) -> None: ...
def Z3_global_param_reset_all(_elems=...) -> None: ...
def Z3_global_param_get(a0, a1, _elems=...): ...
def Z3_mk_config(_elems=...): ...
def Z3_del_config(a0, _elems=...) -> None: ...
def Z3_set_param_value(a0, a1, a2, _elems=...) -> None: ...
def Z3_mk_context(a0, _elems=...): ...
def Z3_mk_context_rc(a0, _elems=...): ...
def Z3_del_context(a0, _elems=...) -> None: ...
def Z3_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_update_param_value(a0, a1, a2, _elems=...) -> None: ...
def Z3_interrupt(a0, _elems=...) -> None: ...
def Z3_mk_params(a0, _elems=...): ...
def Z3_params_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_params_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_params_set_bool(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_params_set_uint(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_params_set_double(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_params_set_symbol(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_params_to_string(a0, a1, _elems=...): ...
def Z3_params_to_string_bytes(a0, a1, _elems=...): ...
def Z3_params_validate(a0, a1, a2, _elems=...) -> None: ...
def Z3_param_descrs_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_param_descrs_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_param_descrs_get_kind(a0, a1, a2, _elems=...): ...
def Z3_param_descrs_size(a0, a1, _elems=...): ...
def Z3_param_descrs_get_name(a0, a1, a2, _elems=...): ...
def Z3_param_descrs_get_documentation(a0, a1, a2, _elems=...): ...
def Z3_param_descrs_get_documentation_bytes(a0, a1, a2, _elems=...): ...
def Z3_param_descrs_to_string(a0, a1, _elems=...): ...
def Z3_param_descrs_to_string_bytes(a0, a1, _elems=...): ...
def Z3_mk_int_symbol(a0, a1, _elems=...): ...
def Z3_mk_string_symbol(a0, a1, _elems=...): ...
def Z3_mk_uninterpreted_sort(a0, a1, _elems=...): ...
def Z3_mk_bool_sort(a0, _elems=...): ...
def Z3_mk_int_sort(a0, _elems=...): ...
def Z3_mk_real_sort(a0, _elems=...): ...
def Z3_mk_bv_sort(a0, a1, _elems=...): ...
def Z3_mk_finite_domain_sort(a0, a1, a2, _elems=...): ...
def Z3_mk_array_sort(a0, a1, a2, _elems=...): ...
def Z3_mk_array_sort_n(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_tuple_sort(a0, a1, a2, a3, a4, a5, a6, _elems=...): ...
def Z3_mk_enumeration_sort(a0, a1, a2, a3, a4, a5, _elems=...): ...
def Z3_mk_list_sort(a0, a1, a2, a3, a4, a5, a6, a7, a8, _elems=...): ...
def Z3_mk_constructor(a0, a1, a2, a3, a4, a5, a6, _elems=...): ...
def Z3_del_constructor(a0, a1, _elems=...) -> None: ...
def Z3_mk_datatype(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_constructor_list(a0, a1, a2, _elems=...): ...
def Z3_del_constructor_list(a0, a1, _elems=...) -> None: ...
def Z3_mk_datatypes(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_query_constructor(a0, a1, a2, a3, a4, a5, _elems=...) -> None: ...
def Z3_mk_func_decl(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_app(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_const(a0, a1, a2, _elems=...): ...
def Z3_mk_fresh_func_decl(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_fresh_const(a0, a1, a2, _elems=...): ...
def Z3_mk_rec_func_decl(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_add_rec_def(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_mk_true(a0, _elems=...): ...
def Z3_mk_false(a0, _elems=...): ...
def Z3_mk_eq(a0, a1, a2, _elems=...): ...
def Z3_mk_distinct(a0, a1, a2, _elems=...): ...
def Z3_mk_not(a0, a1, _elems=...): ...
def Z3_mk_ite(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_iff(a0, a1, a2, _elems=...): ...
def Z3_mk_implies(a0, a1, a2, _elems=...): ...
def Z3_mk_xor(a0, a1, a2, _elems=...): ...
def Z3_mk_and(a0, a1, a2, _elems=...): ...
def Z3_mk_or(a0, a1, a2, _elems=...): ...
def Z3_mk_add(a0, a1, a2, _elems=...): ...
def Z3_mk_mul(a0, a1, a2, _elems=...): ...
def Z3_mk_sub(a0, a1, a2, _elems=...): ...
def Z3_mk_unary_minus(a0, a1, _elems=...): ...
def Z3_mk_div(a0, a1, a2, _elems=...): ...
def Z3_mk_mod(a0, a1, a2, _elems=...): ...
def Z3_mk_rem(a0, a1, a2, _elems=...): ...
def Z3_mk_power(a0, a1, a2, _elems=...): ...
def Z3_mk_lt(a0, a1, a2, _elems=...): ...
def Z3_mk_le(a0, a1, a2, _elems=...): ...
def Z3_mk_gt(a0, a1, a2, _elems=...): ...
def Z3_mk_ge(a0, a1, a2, _elems=...): ...
def Z3_mk_divides(a0, a1, a2, _elems=...): ...
def Z3_mk_int2real(a0, a1, _elems=...): ...
def Z3_mk_real2int(a0, a1, _elems=...): ...
def Z3_mk_is_int(a0, a1, _elems=...): ...
def Z3_mk_bvnot(a0, a1, _elems=...): ...
def Z3_mk_bvredand(a0, a1, _elems=...): ...
def Z3_mk_bvredor(a0, a1, _elems=...): ...
def Z3_mk_bvand(a0, a1, a2, _elems=...): ...
def Z3_mk_bvor(a0, a1, a2, _elems=...): ...
def Z3_mk_bvxor(a0, a1, a2, _elems=...): ...
def Z3_mk_bvnand(a0, a1, a2, _elems=...): ...
def Z3_mk_bvnor(a0, a1, a2, _elems=...): ...
def Z3_mk_bvxnor(a0, a1, a2, _elems=...): ...
def Z3_mk_bvneg(a0, a1, _elems=...): ...
def Z3_mk_bvadd(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsub(a0, a1, a2, _elems=...): ...
def Z3_mk_bvmul(a0, a1, a2, _elems=...): ...
def Z3_mk_bvudiv(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsdiv(a0, a1, a2, _elems=...): ...
def Z3_mk_bvurem(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsrem(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsmod(a0, a1, a2, _elems=...): ...
def Z3_mk_bvult(a0, a1, a2, _elems=...): ...
def Z3_mk_bvslt(a0, a1, a2, _elems=...): ...
def Z3_mk_bvule(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsle(a0, a1, a2, _elems=...): ...
def Z3_mk_bvuge(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsge(a0, a1, a2, _elems=...): ...
def Z3_mk_bvugt(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsgt(a0, a1, a2, _elems=...): ...
def Z3_mk_concat(a0, a1, a2, _elems=...): ...
def Z3_mk_extract(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_sign_ext(a0, a1, a2, _elems=...): ...
def Z3_mk_zero_ext(a0, a1, a2, _elems=...): ...
def Z3_mk_repeat(a0, a1, a2, _elems=...): ...
def Z3_mk_bvshl(a0, a1, a2, _elems=...): ...
def Z3_mk_bvlshr(a0, a1, a2, _elems=...): ...
def Z3_mk_bvashr(a0, a1, a2, _elems=...): ...
def Z3_mk_rotate_left(a0, a1, a2, _elems=...): ...
def Z3_mk_rotate_right(a0, a1, a2, _elems=...): ...
def Z3_mk_ext_rotate_left(a0, a1, a2, _elems=...): ...
def Z3_mk_ext_rotate_right(a0, a1, a2, _elems=...): ...
def Z3_mk_int2bv(a0, a1, a2, _elems=...): ...
def Z3_mk_bv2int(a0, a1, a2, _elems=...): ...
def Z3_mk_bvadd_no_overflow(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_bvadd_no_underflow(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsub_no_overflow(a0, a1, a2, _elems=...): ...
def Z3_mk_bvsub_no_underflow(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_bvsdiv_no_overflow(a0, a1, a2, _elems=...): ...
def Z3_mk_bvneg_no_overflow(a0, a1, _elems=...): ...
def Z3_mk_bvmul_no_overflow(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_bvmul_no_underflow(a0, a1, a2, _elems=...): ...
def Z3_mk_select(a0, a1, a2, _elems=...): ...
def Z3_mk_select_n(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_store(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_store_n(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_const_array(a0, a1, a2, _elems=...): ...
def Z3_mk_map(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_array_default(a0, a1, _elems=...): ...
def Z3_mk_as_array(a0, a1, _elems=...): ...
def Z3_mk_set_has_size(a0, a1, a2, _elems=...): ...
def Z3_mk_set_sort(a0, a1, _elems=...): ...
def Z3_mk_empty_set(a0, a1, _elems=...): ...
def Z3_mk_full_set(a0, a1, _elems=...): ...
def Z3_mk_set_add(a0, a1, a2, _elems=...): ...
def Z3_mk_set_del(a0, a1, a2, _elems=...): ...
def Z3_mk_set_union(a0, a1, a2, _elems=...): ...
def Z3_mk_set_intersect(a0, a1, a2, _elems=...): ...
def Z3_mk_set_difference(a0, a1, a2, _elems=...): ...
def Z3_mk_set_complement(a0, a1, _elems=...): ...
def Z3_mk_set_member(a0, a1, a2, _elems=...): ...
def Z3_mk_set_subset(a0, a1, a2, _elems=...): ...
def Z3_mk_array_ext(a0, a1, a2, _elems=...): ...
def Z3_mk_numeral(a0, a1, a2, _elems=...): ...
def Z3_mk_real(a0, a1, a2, _elems=...): ...
def Z3_mk_int(a0, a1, a2, _elems=...): ...
def Z3_mk_unsigned_int(a0, a1, a2, _elems=...): ...
def Z3_mk_int64(a0, a1, a2, _elems=...): ...
def Z3_mk_unsigned_int64(a0, a1, a2, _elems=...): ...
def Z3_mk_bv_numeral(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_sort(a0, a1, _elems=...): ...
def Z3_is_seq_sort(a0, a1, _elems=...): ...
def Z3_get_seq_sort_basis(a0, a1, _elems=...): ...
def Z3_mk_re_sort(a0, a1, _elems=...): ...
def Z3_is_re_sort(a0, a1, _elems=...): ...
def Z3_get_re_sort_basis(a0, a1, _elems=...): ...
def Z3_mk_string_sort(a0, _elems=...): ...
def Z3_is_string_sort(a0, a1, _elems=...): ...
def Z3_mk_string(a0, a1, _elems=...): ...
def Z3_mk_lstring(a0, a1, a2, _elems=...): ...
def Z3_is_string(a0, a1, _elems=...): ...
def Z3_get_string(a0, a1, _elems=...): ...
def Z3_get_string_bytes(a0, a1, _elems=...): ...
def Z3_get_lstring(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_empty(a0, a1, _elems=...): ...
def Z3_mk_seq_unit(a0, a1, _elems=...): ...
def Z3_mk_seq_concat(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_prefix(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_suffix(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_contains(a0, a1, a2, _elems=...): ...
def Z3_mk_str_lt(a0, a1, a2, _elems=...): ...
def Z3_mk_str_le(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_extract(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_seq_replace(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_seq_at(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_nth(a0, a1, a2, _elems=...): ...
def Z3_mk_seq_length(a0, a1, _elems=...): ...
def Z3_mk_seq_index(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_seq_last_index(a0, a1, a2, _elems=...): ...
def Z3_mk_str_to_int(a0, a1, _elems=...): ...
def Z3_mk_int_to_str(a0, a1, _elems=...): ...
def Z3_mk_seq_to_re(a0, a1, _elems=...): ...
def Z3_mk_seq_in_re(a0, a1, a2, _elems=...): ...
def Z3_mk_re_plus(a0, a1, _elems=...): ...
def Z3_mk_re_star(a0, a1, _elems=...): ...
def Z3_mk_re_option(a0, a1, _elems=...): ...
def Z3_mk_re_union(a0, a1, a2, _elems=...): ...
def Z3_mk_re_concat(a0, a1, a2, _elems=...): ...
def Z3_mk_re_range(a0, a1, a2, _elems=...): ...
def Z3_mk_re_loop(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_re_intersect(a0, a1, a2, _elems=...): ...
def Z3_mk_re_complement(a0, a1, _elems=...): ...
def Z3_mk_re_empty(a0, a1, _elems=...): ...
def Z3_mk_re_full(a0, a1, _elems=...): ...
def Z3_mk_linear_order(a0, a1, a2, _elems=...): ...
def Z3_mk_partial_order(a0, a1, a2, _elems=...): ...
def Z3_mk_piecewise_linear_order(a0, a1, a2, _elems=...): ...
def Z3_mk_tree_order(a0, a1, a2, _elems=...): ...
def Z3_mk_transitive_closure(a0, a1, _elems=...): ...
def Z3_mk_pattern(a0, a1, a2, _elems=...): ...
def Z3_mk_bound(a0, a1, a2, _elems=...): ...
def Z3_mk_forall(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_mk_exists(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_mk_quantifier(a0, a1, a2, a3, a4, a5, a6, a7, a8, _elems=...): ...
def Z3_mk_quantifier_ex(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, _elems=...): ...
def Z3_mk_forall_const(a0, a1, a2, a3, a4, a5, a6, _elems=...): ...
def Z3_mk_exists_const(a0, a1, a2, a3, a4, a5, a6, _elems=...): ...
def Z3_mk_quantifier_const(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_mk_quantifier_const_ex(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, _elems=...): ...
def Z3_mk_lambda(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_lambda_const(a0, a1, a2, a3, _elems=...): ...
def Z3_get_symbol_kind(a0, a1, _elems=...): ...
def Z3_get_symbol_int(a0, a1, _elems=...): ...
def Z3_get_symbol_string(a0, a1, _elems=...): ...
def Z3_get_symbol_string_bytes(a0, a1, _elems=...): ...
def Z3_get_sort_name(a0, a1, _elems=...): ...
def Z3_get_sort_id(a0, a1, _elems=...): ...
def Z3_sort_to_ast(a0, a1, _elems=...): ...
def Z3_is_eq_sort(a0, a1, a2, _elems=...): ...
def Z3_get_sort_kind(a0, a1, _elems=...): ...
def Z3_get_bv_sort_size(a0, a1, _elems=...): ...
def Z3_get_finite_domain_sort_size(a0, a1, a2, _elems=...): ...
def Z3_get_array_sort_domain(a0, a1, _elems=...): ...
def Z3_get_array_sort_range(a0, a1, _elems=...): ...
def Z3_get_tuple_sort_mk_decl(a0, a1, _elems=...): ...
def Z3_get_tuple_sort_num_fields(a0, a1, _elems=...): ...
def Z3_get_tuple_sort_field_decl(a0, a1, a2, _elems=...): ...
def Z3_get_datatype_sort_num_constructors(a0, a1, _elems=...): ...
def Z3_get_datatype_sort_constructor(a0, a1, a2, _elems=...): ...
def Z3_get_datatype_sort_recognizer(a0, a1, a2, _elems=...): ...
def Z3_get_datatype_sort_constructor_accessor(a0, a1, a2, a3, _elems=...): ...
def Z3_datatype_update_field(a0, a1, a2, a3, _elems=...): ...
def Z3_get_relation_arity(a0, a1, _elems=...): ...
def Z3_get_relation_column(a0, a1, a2, _elems=...): ...
def Z3_mk_atmost(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_atleast(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_pble(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_pbge(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_pbeq(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_func_decl_to_ast(a0, a1, _elems=...): ...
def Z3_is_eq_func_decl(a0, a1, a2, _elems=...): ...
def Z3_get_func_decl_id(a0, a1, _elems=...): ...
def Z3_get_decl_name(a0, a1, _elems=...): ...
def Z3_get_decl_kind(a0, a1, _elems=...): ...
def Z3_get_domain_size(a0, a1, _elems=...): ...
def Z3_get_arity(a0, a1, _elems=...): ...
def Z3_get_domain(a0, a1, a2, _elems=...): ...
def Z3_get_range(a0, a1, _elems=...): ...
def Z3_get_decl_num_parameters(a0, a1, _elems=...): ...
def Z3_get_decl_parameter_kind(a0, a1, a2, _elems=...): ...
def Z3_get_decl_int_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_double_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_symbol_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_sort_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_ast_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_func_decl_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_rational_parameter(a0, a1, a2, _elems=...): ...
def Z3_get_decl_rational_parameter_bytes(a0, a1, a2, _elems=...): ...
def Z3_app_to_ast(a0, a1, _elems=...): ...
def Z3_get_app_decl(a0, a1, _elems=...): ...
def Z3_get_app_num_args(a0, a1, _elems=...): ...
def Z3_get_app_arg(a0, a1, a2, _elems=...): ...
def Z3_is_eq_ast(a0, a1, a2, _elems=...): ...
def Z3_get_ast_id(a0, a1, _elems=...): ...
def Z3_get_ast_hash(a0, a1, _elems=...): ...
def Z3_get_sort(a0, a1, _elems=...): ...
def Z3_is_well_sorted(a0, a1, _elems=...): ...
def Z3_get_bool_value(a0, a1, _elems=...): ...
def Z3_get_ast_kind(a0, a1, _elems=...): ...
def Z3_is_app(a0, a1, _elems=...): ...
def Z3_is_numeral_ast(a0, a1, _elems=...): ...
def Z3_is_algebraic_number(a0, a1, _elems=...): ...
def Z3_to_app(a0, a1, _elems=...): ...
def Z3_to_func_decl(a0, a1, _elems=...): ...
def Z3_get_numeral_string(a0, a1, _elems=...): ...
def Z3_get_numeral_string_bytes(a0, a1, _elems=...): ...
def Z3_get_numeral_binary_string(a0, a1, _elems=...): ...
def Z3_get_numeral_binary_string_bytes(a0, a1, _elems=...): ...
def Z3_get_numeral_decimal_string(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_decimal_string_bytes(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_double(a0, a1, _elems=...): ...
def Z3_get_numerator(a0, a1, _elems=...): ...
def Z3_get_denominator(a0, a1, _elems=...): ...
def Z3_get_numeral_small(a0, a1, a2, a3, _elems=...): ...
def Z3_get_numeral_int(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_uint(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_uint64(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_int64(a0, a1, a2, _elems=...): ...
def Z3_get_numeral_rational_int64(a0, a1, a2, a3, _elems=...): ...
def Z3_get_algebraic_number_lower(a0, a1, a2, _elems=...): ...
def Z3_get_algebraic_number_upper(a0, a1, a2, _elems=...): ...
def Z3_pattern_to_ast(a0, a1, _elems=...): ...
def Z3_get_pattern_num_terms(a0, a1, _elems=...): ...
def Z3_get_pattern(a0, a1, a2, _elems=...): ...
def Z3_get_index_value(a0, a1, _elems=...): ...
def Z3_is_quantifier_forall(a0, a1, _elems=...): ...
def Z3_is_quantifier_exists(a0, a1, _elems=...): ...
def Z3_is_lambda(a0, a1, _elems=...): ...
def Z3_get_quantifier_weight(a0, a1, _elems=...): ...
def Z3_get_quantifier_num_patterns(a0, a1, _elems=...): ...
def Z3_get_quantifier_pattern_ast(a0, a1, a2, _elems=...): ...
def Z3_get_quantifier_num_no_patterns(a0, a1, _elems=...): ...
def Z3_get_quantifier_no_pattern_ast(a0, a1, a2, _elems=...): ...
def Z3_get_quantifier_num_bound(a0, a1, _elems=...): ...
def Z3_get_quantifier_bound_name(a0, a1, a2, _elems=...): ...
def Z3_get_quantifier_bound_sort(a0, a1, a2, _elems=...): ...
def Z3_get_quantifier_body(a0, a1, _elems=...): ...
def Z3_simplify(a0, a1, _elems=...): ...
def Z3_simplify_ex(a0, a1, a2, _elems=...): ...
def Z3_simplify_get_help(a0, _elems=...): ...
def Z3_simplify_get_help_bytes(a0, _elems=...): ...
def Z3_simplify_get_param_descrs(a0, _elems=...): ...
def Z3_update_term(a0, a1, a2, a3, _elems=...): ...
def Z3_substitute(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_substitute_vars(a0, a1, a2, a3, _elems=...): ...
def Z3_translate(a0, a1, a2, _elems=...): ...
def Z3_mk_model(a0, _elems=...): ...
def Z3_model_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_model_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_model_eval(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_model_get_const_interp(a0, a1, a2, _elems=...): ...
def Z3_model_has_interp(a0, a1, a2, _elems=...): ...
def Z3_model_get_func_interp(a0, a1, a2, _elems=...): ...
def Z3_model_get_num_consts(a0, a1, _elems=...): ...
def Z3_model_get_const_decl(a0, a1, a2, _elems=...): ...
def Z3_model_get_num_funcs(a0, a1, _elems=...): ...
def Z3_model_get_func_decl(a0, a1, a2, _elems=...): ...
def Z3_model_get_num_sorts(a0, a1, _elems=...): ...
def Z3_model_get_sort(a0, a1, a2, _elems=...): ...
def Z3_model_get_sort_universe(a0, a1, a2, _elems=...): ...
def Z3_model_translate(a0, a1, a2, _elems=...): ...
def Z3_is_as_array(a0, a1, _elems=...): ...
def Z3_get_as_array_func_decl(a0, a1, _elems=...): ...
def Z3_add_func_interp(a0, a1, a2, a3, _elems=...): ...
def Z3_add_const_interp(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_func_interp_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_func_interp_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_func_interp_get_num_entries(a0, a1, _elems=...): ...
def Z3_func_interp_get_entry(a0, a1, a2, _elems=...): ...
def Z3_func_interp_get_else(a0, a1, _elems=...): ...
def Z3_func_interp_set_else(a0, a1, a2, _elems=...) -> None: ...
def Z3_func_interp_get_arity(a0, a1, _elems=...): ...
def Z3_func_interp_add_entry(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_func_entry_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_func_entry_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_func_entry_get_value(a0, a1, _elems=...): ...
def Z3_func_entry_get_num_args(a0, a1, _elems=...): ...
def Z3_func_entry_get_arg(a0, a1, a2, _elems=...): ...
def Z3_open_log(a0, _elems=...): ...
def Z3_append_log(a0, _elems=...) -> None: ...
def Z3_close_log(_elems=...) -> None: ...
def Z3_toggle_warning_messages(a0, _elems=...) -> None: ...
def Z3_set_ast_print_mode(a0, a1, _elems=...) -> None: ...
def Z3_ast_to_string(a0, a1, _elems=...): ...
def Z3_ast_to_string_bytes(a0, a1, _elems=...): ...
def Z3_pattern_to_string(a0, a1, _elems=...): ...
def Z3_pattern_to_string_bytes(a0, a1, _elems=...): ...
def Z3_sort_to_string(a0, a1, _elems=...): ...
def Z3_sort_to_string_bytes(a0, a1, _elems=...): ...
def Z3_func_decl_to_string(a0, a1, _elems=...): ...
def Z3_func_decl_to_string_bytes(a0, a1, _elems=...): ...
def Z3_model_to_string(a0, a1, _elems=...): ...
def Z3_model_to_string_bytes(a0, a1, _elems=...): ...
def Z3_benchmark_to_smtlib_string(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_benchmark_to_smtlib_string_bytes(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_parse_smtlib2_string(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_parse_smtlib2_file(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...): ...
def Z3_eval_smtlib2_string(a0, a1, _elems=...): ...
def Z3_eval_smtlib2_string_bytes(a0, a1, _elems=...): ...
def Z3_get_error_code(a0, _elems=...): ...
def Z3_set_error(a0, a1, _elems=...) -> None: ...
def Z3_get_error_msg(a0, a1, _elems=...): ...
def Z3_get_error_msg_bytes(a0, a1, _elems=...): ...
def Z3_get_version(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_get_full_version(_elems=...): ...
def Z3_get_full_version_bytes(_elems=...): ...
def Z3_enable_trace(a0, _elems=...) -> None: ...
def Z3_disable_trace(a0, _elems=...) -> None: ...
def Z3_reset_memory(_elems=...) -> None: ...
def Z3_finalize_memory(_elems=...) -> None: ...
def Z3_mk_goal(a0, a1, a2, a3, _elems=...): ...
def Z3_goal_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_goal_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_goal_precision(a0, a1, _elems=...): ...
def Z3_goal_assert(a0, a1, a2, _elems=...) -> None: ...
def Z3_goal_inconsistent(a0, a1, _elems=...): ...
def Z3_goal_depth(a0, a1, _elems=...): ...
def Z3_goal_reset(a0, a1, _elems=...) -> None: ...
def Z3_goal_size(a0, a1, _elems=...): ...
def Z3_goal_formula(a0, a1, a2, _elems=...): ...
def Z3_goal_num_exprs(a0, a1, _elems=...): ...
def Z3_goal_is_decided_sat(a0, a1, _elems=...): ...
def Z3_goal_is_decided_unsat(a0, a1, _elems=...): ...
def Z3_goal_translate(a0, a1, a2, _elems=...): ...
def Z3_goal_convert_model(a0, a1, a2, _elems=...): ...
def Z3_goal_to_string(a0, a1, _elems=...): ...
def Z3_goal_to_string_bytes(a0, a1, _elems=...): ...
def Z3_goal_to_dimacs_string(a0, a1, a2, _elems=...): ...
def Z3_goal_to_dimacs_string_bytes(a0, a1, a2, _elems=...): ...
def Z3_mk_tactic(a0, a1, _elems=...): ...
def Z3_tactic_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_tactic_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_mk_probe(a0, a1, _elems=...): ...
def Z3_probe_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_probe_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_tactic_and_then(a0, a1, a2, _elems=...): ...
def Z3_tactic_or_else(a0, a1, a2, _elems=...): ...
def Z3_tactic_par_or(a0, a1, a2, _elems=...): ...
def Z3_tactic_par_and_then(a0, a1, a2, _elems=...): ...
def Z3_tactic_try_for(a0, a1, a2, _elems=...): ...
def Z3_tactic_when(a0, a1, a2, _elems=...): ...
def Z3_tactic_cond(a0, a1, a2, a3, _elems=...): ...
def Z3_tactic_repeat(a0, a1, a2, _elems=...): ...
def Z3_tactic_skip(a0, _elems=...): ...
def Z3_tactic_fail(a0, _elems=...): ...
def Z3_tactic_fail_if(a0, a1, _elems=...): ...
def Z3_tactic_fail_if_not_decided(a0, _elems=...): ...
def Z3_tactic_using_params(a0, a1, a2, _elems=...): ...
def Z3_probe_const(a0, a1, _elems=...): ...
def Z3_probe_lt(a0, a1, a2, _elems=...): ...
def Z3_probe_gt(a0, a1, a2, _elems=...): ...
def Z3_probe_le(a0, a1, a2, _elems=...): ...
def Z3_probe_ge(a0, a1, a2, _elems=...): ...
def Z3_probe_eq(a0, a1, a2, _elems=...): ...
def Z3_probe_and(a0, a1, a2, _elems=...): ...
def Z3_probe_or(a0, a1, a2, _elems=...): ...
def Z3_probe_not(a0, a1, _elems=...): ...
def Z3_get_num_tactics(a0, _elems=...): ...
def Z3_get_tactic_name(a0, a1, _elems=...): ...
def Z3_get_tactic_name_bytes(a0, a1, _elems=...): ...
def Z3_get_num_probes(a0, _elems=...): ...
def Z3_get_probe_name(a0, a1, _elems=...): ...
def Z3_get_probe_name_bytes(a0, a1, _elems=...): ...
def Z3_tactic_get_help(a0, a1, _elems=...): ...
def Z3_tactic_get_help_bytes(a0, a1, _elems=...): ...
def Z3_tactic_get_param_descrs(a0, a1, _elems=...): ...
def Z3_tactic_get_descr(a0, a1, _elems=...): ...
def Z3_tactic_get_descr_bytes(a0, a1, _elems=...): ...
def Z3_probe_get_descr(a0, a1, _elems=...): ...
def Z3_probe_get_descr_bytes(a0, a1, _elems=...): ...
def Z3_probe_apply(a0, a1, a2, _elems=...): ...
def Z3_tactic_apply(a0, a1, a2, _elems=...): ...
def Z3_tactic_apply_ex(a0, a1, a2, a3, _elems=...): ...
def Z3_apply_result_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_apply_result_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_apply_result_to_string(a0, a1, _elems=...): ...
def Z3_apply_result_to_string_bytes(a0, a1, _elems=...): ...
def Z3_apply_result_get_num_subgoals(a0, a1, _elems=...): ...
def Z3_apply_result_get_subgoal(a0, a1, a2, _elems=...): ...
def Z3_mk_solver(a0, _elems=...): ...
def Z3_mk_simple_solver(a0, _elems=...): ...
def Z3_mk_solver_for_logic(a0, a1, _elems=...): ...
def Z3_mk_solver_from_tactic(a0, a1, _elems=...): ...
def Z3_solver_translate(a0, a1, a2, _elems=...): ...
def Z3_solver_import_model_converter(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_get_help(a0, a1, _elems=...): ...
def Z3_solver_get_help_bytes(a0, a1, _elems=...): ...
def Z3_solver_get_param_descrs(a0, a1, _elems=...): ...
def Z3_solver_set_params(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_solver_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_solver_interrupt(a0, a1, _elems=...) -> None: ...
def Z3_solver_push(a0, a1, _elems=...) -> None: ...
def Z3_solver_pop(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_reset(a0, a1, _elems=...) -> None: ...
def Z3_solver_get_num_scopes(a0, a1, _elems=...): ...
def Z3_solver_assert(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_assert_and_track(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_solver_from_file(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_from_string(a0, a1, a2, _elems=...) -> None: ...
def Z3_solver_get_assertions(a0, a1, _elems=...): ...
def Z3_solver_get_units(a0, a1, _elems=...): ...
def Z3_solver_get_trail(a0, a1, _elems=...): ...
def Z3_solver_get_non_units(a0, a1, _elems=...): ...
def Z3_solver_get_levels(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_solver_propagate_register(a0, a1, a2, _elems=...): ...
def Z3_solver_propagate_consequence(a0, a1, a2, a3, a4, a5, a6, a7, _elems=...) -> None: ...
def Z3_solver_check(a0, a1, _elems=...): ...
def Z3_solver_check_assumptions(a0, a1, a2, a3, _elems=...): ...
def Z3_get_implied_equalities(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_solver_get_consequences(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_solver_cube(a0, a1, a2, a3, _elems=...): ...
def Z3_solver_get_model(a0, a1, _elems=...): ...
def Z3_solver_get_proof(a0, a1, _elems=...): ...
def Z3_solver_get_unsat_core(a0, a1, _elems=...): ...
def Z3_solver_get_reason_unknown(a0, a1, _elems=...): ...
def Z3_solver_get_reason_unknown_bytes(a0, a1, _elems=...): ...
def Z3_solver_get_statistics(a0, a1, _elems=...): ...
def Z3_solver_to_string(a0, a1, _elems=...): ...
def Z3_solver_to_string_bytes(a0, a1, _elems=...): ...
def Z3_solver_to_dimacs_string(a0, a1, a2, _elems=...): ...
def Z3_solver_to_dimacs_string_bytes(a0, a1, a2, _elems=...): ...
def Z3_stats_to_string(a0, a1, _elems=...): ...
def Z3_stats_to_string_bytes(a0, a1, _elems=...): ...
def Z3_stats_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_stats_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_stats_size(a0, a1, _elems=...): ...
def Z3_stats_get_key(a0, a1, a2, _elems=...): ...
def Z3_stats_get_key_bytes(a0, a1, a2, _elems=...): ...
def Z3_stats_is_uint(a0, a1, a2, _elems=...): ...
def Z3_stats_is_double(a0, a1, a2, _elems=...): ...
def Z3_stats_get_uint_value(a0, a1, a2, _elems=...): ...
def Z3_stats_get_double_value(a0, a1, a2, _elems=...): ...
def Z3_get_estimated_alloc_size(_elems=...): ...
def Z3_mk_ast_vector(a0, _elems=...): ...
def Z3_ast_vector_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_ast_vector_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_ast_vector_size(a0, a1, _elems=...): ...
def Z3_ast_vector_get(a0, a1, a2, _elems=...): ...
def Z3_ast_vector_set(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_ast_vector_resize(a0, a1, a2, _elems=...) -> None: ...
def Z3_ast_vector_push(a0, a1, a2, _elems=...) -> None: ...
def Z3_ast_vector_translate(a0, a1, a2, _elems=...): ...
def Z3_ast_vector_to_string(a0, a1, _elems=...): ...
def Z3_ast_vector_to_string_bytes(a0, a1, _elems=...): ...
def Z3_mk_ast_map(a0, _elems=...): ...
def Z3_ast_map_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_ast_map_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_ast_map_contains(a0, a1, a2, _elems=...): ...
def Z3_ast_map_find(a0, a1, a2, _elems=...): ...
def Z3_ast_map_insert(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_ast_map_erase(a0, a1, a2, _elems=...) -> None: ...
def Z3_ast_map_reset(a0, a1, _elems=...) -> None: ...
def Z3_ast_map_size(a0, a1, _elems=...): ...
def Z3_ast_map_keys(a0, a1, _elems=...): ...
def Z3_ast_map_to_string(a0, a1, _elems=...): ...
def Z3_ast_map_to_string_bytes(a0, a1, _elems=...): ...
def Z3_algebraic_is_value(a0, a1, _elems=...): ...
def Z3_algebraic_is_pos(a0, a1, _elems=...): ...
def Z3_algebraic_is_neg(a0, a1, _elems=...): ...
def Z3_algebraic_is_zero(a0, a1, _elems=...): ...
def Z3_algebraic_sign(a0, a1, _elems=...): ...
def Z3_algebraic_add(a0, a1, a2, _elems=...): ...
def Z3_algebraic_sub(a0, a1, a2, _elems=...): ...
def Z3_algebraic_mul(a0, a1, a2, _elems=...): ...
def Z3_algebraic_div(a0, a1, a2, _elems=...): ...
def Z3_algebraic_root(a0, a1, a2, _elems=...): ...
def Z3_algebraic_power(a0, a1, a2, _elems=...): ...
def Z3_algebraic_lt(a0, a1, a2, _elems=...): ...
def Z3_algebraic_gt(a0, a1, a2, _elems=...): ...
def Z3_algebraic_le(a0, a1, a2, _elems=...): ...
def Z3_algebraic_ge(a0, a1, a2, _elems=...): ...
def Z3_algebraic_eq(a0, a1, a2, _elems=...): ...
def Z3_algebraic_neq(a0, a1, a2, _elems=...): ...
def Z3_algebraic_roots(a0, a1, a2, a3, _elems=...): ...
def Z3_algebraic_eval(a0, a1, a2, a3, _elems=...): ...
def Z3_algebraic_get_poly(a0, a1, _elems=...): ...
def Z3_algebraic_get_i(a0, a1, _elems=...): ...
def Z3_polynomial_subresultants(a0, a1, a2, a3, _elems=...): ...
def Z3_rcf_del(a0, a1, _elems=...) -> None: ...
def Z3_rcf_mk_rational(a0, a1, _elems=...): ...
def Z3_rcf_mk_small_int(a0, a1, _elems=...): ...
def Z3_rcf_mk_pi(a0, _elems=...): ...
def Z3_rcf_mk_e(a0, _elems=...): ...
def Z3_rcf_mk_infinitesimal(a0, _elems=...): ...
def Z3_rcf_mk_roots(a0, a1, a2, a3, _elems=...): ...
def Z3_rcf_add(a0, a1, a2, _elems=...): ...
def Z3_rcf_sub(a0, a1, a2, _elems=...): ...
def Z3_rcf_mul(a0, a1, a2, _elems=...): ...
def Z3_rcf_div(a0, a1, a2, _elems=...): ...
def Z3_rcf_neg(a0, a1, _elems=...): ...
def Z3_rcf_inv(a0, a1, _elems=...): ...
def Z3_rcf_power(a0, a1, a2, _elems=...): ...
def Z3_rcf_lt(a0, a1, a2, _elems=...): ...
def Z3_rcf_gt(a0, a1, a2, _elems=...): ...
def Z3_rcf_le(a0, a1, a2, _elems=...): ...
def Z3_rcf_ge(a0, a1, a2, _elems=...): ...
def Z3_rcf_eq(a0, a1, a2, _elems=...): ...
def Z3_rcf_neq(a0, a1, a2, _elems=...): ...
def Z3_rcf_num_to_string(a0, a1, a2, a3, _elems=...): ...
def Z3_rcf_num_to_string_bytes(a0, a1, a2, a3, _elems=...): ...
def Z3_rcf_num_to_decimal_string(a0, a1, a2, _elems=...): ...
def Z3_rcf_num_to_decimal_string_bytes(a0, a1, a2, _elems=...): ...
def Z3_rcf_get_numerator_denominator(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_mk_fixedpoint(a0, _elems=...): ...
def Z3_fixedpoint_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_fixedpoint_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_fixedpoint_add_rule(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_fixedpoint_add_fact(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_fixedpoint_assert(a0, a1, a2, _elems=...) -> None: ...
def Z3_fixedpoint_query(a0, a1, a2, _elems=...): ...
def Z3_fixedpoint_query_relations(a0, a1, a2, a3, _elems=...): ...
def Z3_fixedpoint_get_answer(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_reason_unknown(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_reason_unknown_bytes(a0, a1, _elems=...): ...
def Z3_fixedpoint_update_rule(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_fixedpoint_get_num_levels(a0, a1, a2, _elems=...): ...
def Z3_fixedpoint_get_cover_delta(a0, a1, a2, a3, _elems=...): ...
def Z3_fixedpoint_add_cover(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_fixedpoint_get_statistics(a0, a1, _elems=...): ...
def Z3_fixedpoint_register_relation(a0, a1, a2, _elems=...) -> None: ...
def Z3_fixedpoint_set_predicate_representation(a0, a1, a2, a3, a4, _elems=...) -> None: ...
def Z3_fixedpoint_get_rules(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_assertions(a0, a1, _elems=...): ...
def Z3_fixedpoint_set_params(a0, a1, a2, _elems=...) -> None: ...
def Z3_fixedpoint_get_help(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_help_bytes(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_param_descrs(a0, a1, _elems=...): ...
def Z3_fixedpoint_to_string(a0, a1, a2, a3, _elems=...): ...
def Z3_fixedpoint_to_string_bytes(a0, a1, a2, a3, _elems=...): ...
def Z3_fixedpoint_from_string(a0, a1, a2, _elems=...): ...
def Z3_fixedpoint_from_file(a0, a1, a2, _elems=...): ...
def Z3_mk_optimize(a0, _elems=...): ...
def Z3_optimize_inc_ref(a0, a1, _elems=...) -> None: ...
def Z3_optimize_dec_ref(a0, a1, _elems=...) -> None: ...
def Z3_optimize_assert(a0, a1, a2, _elems=...) -> None: ...
def Z3_optimize_assert_and_track(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_optimize_assert_soft(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_optimize_maximize(a0, a1, a2, _elems=...): ...
def Z3_optimize_minimize(a0, a1, a2, _elems=...): ...
def Z3_optimize_push(a0, a1, _elems=...) -> None: ...
def Z3_optimize_pop(a0, a1, _elems=...) -> None: ...
def Z3_optimize_check(a0, a1, a2, a3, _elems=...): ...
def Z3_optimize_get_reason_unknown(a0, a1, _elems=...): ...
def Z3_optimize_get_reason_unknown_bytes(a0, a1, _elems=...): ...
def Z3_optimize_get_model(a0, a1, _elems=...): ...
def Z3_optimize_get_unsat_core(a0, a1, _elems=...): ...
def Z3_optimize_set_params(a0, a1, a2, _elems=...) -> None: ...
def Z3_optimize_get_param_descrs(a0, a1, _elems=...): ...
def Z3_optimize_get_lower(a0, a1, a2, _elems=...): ...
def Z3_optimize_get_upper(a0, a1, a2, _elems=...): ...
def Z3_optimize_get_lower_as_vector(a0, a1, a2, _elems=...): ...
def Z3_optimize_get_upper_as_vector(a0, a1, a2, _elems=...): ...
def Z3_optimize_to_string(a0, a1, _elems=...): ...
def Z3_optimize_to_string_bytes(a0, a1, _elems=...): ...
def Z3_optimize_from_string(a0, a1, a2, _elems=...) -> None: ...
def Z3_optimize_from_file(a0, a1, a2, _elems=...) -> None: ...
def Z3_optimize_get_help(a0, a1, _elems=...): ...
def Z3_optimize_get_help_bytes(a0, a1, _elems=...): ...
def Z3_optimize_get_statistics(a0, a1, _elems=...): ...
def Z3_optimize_get_assertions(a0, a1, _elems=...): ...
def Z3_optimize_get_objectives(a0, a1, _elems=...): ...
def Z3_mk_fpa_rounding_mode_sort(a0, _elems=...): ...
def Z3_mk_fpa_round_nearest_ties_to_even(a0, _elems=...): ...
def Z3_mk_fpa_rne(a0, _elems=...): ...
def Z3_mk_fpa_round_nearest_ties_to_away(a0, _elems=...): ...
def Z3_mk_fpa_rna(a0, _elems=...): ...
def Z3_mk_fpa_round_toward_positive(a0, _elems=...): ...
def Z3_mk_fpa_rtp(a0, _elems=...): ...
def Z3_mk_fpa_round_toward_negative(a0, _elems=...): ...
def Z3_mk_fpa_rtn(a0, _elems=...): ...
def Z3_mk_fpa_round_toward_zero(a0, _elems=...): ...
def Z3_mk_fpa_rtz(a0, _elems=...): ...
def Z3_mk_fpa_sort(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_sort_half(a0, _elems=...): ...
def Z3_mk_fpa_sort_16(a0, _elems=...): ...
def Z3_mk_fpa_sort_single(a0, _elems=...): ...
def Z3_mk_fpa_sort_32(a0, _elems=...): ...
def Z3_mk_fpa_sort_double(a0, _elems=...): ...
def Z3_mk_fpa_sort_64(a0, _elems=...): ...
def Z3_mk_fpa_sort_quadruple(a0, _elems=...): ...
def Z3_mk_fpa_sort_128(a0, _elems=...): ...
def Z3_mk_fpa_nan(a0, a1, _elems=...): ...
def Z3_mk_fpa_inf(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_zero(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_fp(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_numeral_float(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_numeral_double(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_numeral_int(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_numeral_int_uint(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_fpa_numeral_int64_uint64(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_fpa_abs(a0, a1, _elems=...): ...
def Z3_mk_fpa_neg(a0, a1, _elems=...): ...
def Z3_mk_fpa_add(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_sub(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_mul(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_div(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_fma(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_mk_fpa_sqrt(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_rem(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_round_to_integral(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_min(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_max(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_leq(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_lt(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_geq(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_gt(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_eq(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_is_normal(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_subnormal(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_zero(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_infinite(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_nan(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_negative(a0, a1, _elems=...): ...
def Z3_mk_fpa_is_positive(a0, a1, _elems=...): ...
def Z3_mk_fpa_to_fp_bv(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_to_fp_float(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_fp_real(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_fp_signed(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_fp_unsigned(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_ubv(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_sbv(a0, a1, a2, a3, _elems=...): ...
def Z3_mk_fpa_to_real(a0, a1, _elems=...): ...
def Z3_fpa_get_ebits(a0, a1, _elems=...): ...
def Z3_fpa_get_sbits(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_nan(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_inf(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_zero(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_normal(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_subnormal(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_positive(a0, a1, _elems=...): ...
def Z3_fpa_is_numeral_negative(a0, a1, _elems=...): ...
def Z3_fpa_get_numeral_sign_bv(a0, a1, _elems=...): ...
def Z3_fpa_get_numeral_significand_bv(a0, a1, _elems=...): ...
def Z3_fpa_get_numeral_sign(a0, a1, a2, _elems=...): ...
def Z3_fpa_get_numeral_significand_string(a0, a1, _elems=...): ...
def Z3_fpa_get_numeral_significand_string_bytes(a0, a1, _elems=...): ...
def Z3_fpa_get_numeral_significand_uint64(a0, a1, a2, _elems=...): ...
def Z3_fpa_get_numeral_exponent_string(a0, a1, a2, _elems=...): ...
def Z3_fpa_get_numeral_exponent_string_bytes(a0, a1, a2, _elems=...): ...
def Z3_fpa_get_numeral_exponent_int64(a0, a1, a2, a3, _elems=...): ...
def Z3_fpa_get_numeral_exponent_bv(a0, a1, a2, _elems=...): ...
def Z3_mk_fpa_to_ieee_bv(a0, a1, _elems=...): ...
def Z3_mk_fpa_to_fp_int_real(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_fixedpoint_query_from_lvl(a0, a1, a2, a3, _elems=...): ...
def Z3_fixedpoint_get_ground_sat_answer(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_rules_along_trace(a0, a1, _elems=...): ...
def Z3_fixedpoint_get_rule_names_along_trace(a0, a1, _elems=...): ...
def Z3_fixedpoint_add_invariant(a0, a1, a2, a3, _elems=...) -> None: ...
def Z3_fixedpoint_get_reachable(a0, a1, a2, _elems=...): ...
def Z3_qe_model_project(a0, a1, a2, a3, a4, _elems=...): ...
def Z3_qe_model_project_skolem(a0, a1, a2, a3, a4, a5, _elems=...): ...
def Z3_model_extrapolate(a0, a1, a2, _elems=...): ...
def Z3_qe_lite(a0, a1, a2, _elems=...): ...
