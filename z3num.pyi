from .z3 import *
from .z3core import *
from .z3printer import *
from typing import Any

class Numeral:
    ast: Any
    ctx: Any
    def __init__(self, num, ctx: Any | None = ...) -> None: ...
    def __del__(self) -> None: ...
    def is_integer(self): ...
    def is_rational(self): ...
    def denominator(self): ...
    def numerator(self): ...
    def is_irrational(self): ...
    def as_long(self): ...
    def as_fraction(self): ...
    def approx(self, precision: int = ...): ...
    def upper(self, precision: int = ...): ...
    def lower(self, precision: int = ...): ...
    def sign(self): ...
    def is_pos(self): ...
    def is_neg(self): ...
    def is_zero(self): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __div__(self, other): ...
    def __truediv__(self, other): ...
    def __rdiv__(self, other): ...
    def __rtruediv__(self, other): ...
    def root(self, k): ...
    def power(self, k): ...
    def __pow__(self, k): ...
    def __lt__(self, other): ...
    def __rlt__(self, other): ...
    def __gt__(self, other): ...
    def __rgt__(self, other): ...
    def __le__(self, other): ...
    def __rle__(self, other): ...
    def __ge__(self, other): ...
    def __rge__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def sexpr(self): ...
    def as_ast(self): ...
    def ctx_ref(self): ...

def eval_sign_at(p, vs): ...
def isolate_roots(p, vs=...): ...
